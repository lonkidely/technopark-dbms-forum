// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels(in *jlexer.Lexer, out *PostsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PostsResponse, 0, 0)
			} else {
				*out = PostsResponse{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 PostResponse
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels(out *jwriter.Writer, in PostsResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PostsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels(l, v)
}
func easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels1(in *jlexer.Lexer, out *PostsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PostsRequest, 0, 1)
			} else {
				*out = PostsRequest{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 PostRequest
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels1(out *jwriter.Writer, in PostsRequest) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PostsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels1(l, v)
}
func easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels2(in *jlexer.Lexer, out *PostResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "parent":
			out.Parent = int(in.Int())
		case "author":
			out.Author = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "isEdited":
			out.IsEdited = bool(in.Bool())
		case "forum":
			out.Forum = string(in.String())
		case "thread":
			out.Thread = int(in.Int())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels2(out *jwriter.Writer, in PostResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Parent != 0 {
		const prefix string = ",\"parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Parent))
	}
	if in.Author != "" {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.IsEdited {
		const prefix string = ",\"isEdited\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsEdited))
	}
	if in.Forum != "" {
		const prefix string = ",\"forum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Forum))
	}
	if in.Thread != 0 {
		const prefix string = ",\"thread\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Thread))
	}
	if true {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels2(l, v)
}
func easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels3(in *jlexer.Lexer, out *PostRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parent":
			out.Parent = int(in.Int())
		case "author":
			out.Author = string(in.String())
		case "message":
			out.Message = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels3(out *jwriter.Writer, in PostRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Parent != 0 {
		const prefix string = ",\"parent\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Parent))
	}
	if in.Author != "" {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Author))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16fc04efEncodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16fc04efDecodeLonkidelyTechnoparkDbmsForumInternalThreadDeliveryModels3(l, v)
}
